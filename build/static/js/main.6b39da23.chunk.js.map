{"version":3,"sources":["context/Alertas/alertaContext.jsx","context/Autenticacion/authContext.jsx","components/auth/Login.jsx","components/auth/NuevaCuenta.jsx","context/Proyectos/proyectoContext.jsx","components/proyectos/NuevoProyecto.jsx","context/Tareas/tareaContext.jsx","components/proyectos/Proyecto.jsx","components/proyectos/ListadoProyectos.jsx","components/layout/Sidebar.jsx","components/layout/Barra.jsx","components/tareas/FormTarea.jsx","components/tareas/Tarea.jsx","components/tareas/ListadoTareas.jsx","components/proyectos/Proyectos.jsx","context/Proyectos/proyectoReducer.jsx","types/index.js","config/axios.jsx","context/Proyectos/proyectoState.jsx","context/Tareas/tareaReducer.jsx","context/Tareas/tareaState.jsx","context/Alertas/alertaReducer.jsx","context/Alertas/alertaState.jsx","context/Autenticacion/authReducer.jsx","config/tokenAuth.jsx","context/Autenticacion/authState.jsx","components/rutas/RutaPrivada.jsx","App.js","serviceWorker.js","index.js"],"names":["alertaContext","createContext","authContext","Login","props","useContext","AlertaContext","alerta","mostrarAlerta","AuthContext","mensaje","autenticado","iniciarSesion","useEffect","history","push","msg","categoria","useState","email","password","usuario","guardarUsuario","onChange","e","target","name","value","className","onSubmit","preventDefault","trim","htmlFor","type","id","placeholder","to","NuevaCuenta","registrarUsuario","nombre","confirmar","length","proyectoContext","NuevoProyecto","proyectosContext","formulario","errorformulario","mostrarFormulario","agregarProyecto","mostrarError","proyecto","guardarProyecto","onClick","tareaContext","Proyecto","proyectoActual","obtenerTareas","_id","ListadoProyectos","proyectos","obtenerProyectos","TransitionGroup","map","CSSTransition","key","timeout","classNames","Sidebar","Barra","usuarioAutenticado","cerrarSesion","FormTarea","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","actualizarTarea","limpiarTarea","guardarTarea","tarea","Tarea","eliminarTarea","guardarTareaActual","cambiarEstado","estado","seleccionarTarea","ListadoTareas","eliminarProyecto","tareasproyecto","Proyectos","state","action","payload","filter","clienteAxios","axios","create","baseURL","process","ProyectoState","useReducer","proyectoReducer","dispatch","a","get","resultado","data","post","console","log","proyectoId","delete","Provider","children","TareaState","TareaReducer","params","tareas","put","AlertaState","alertaReducer","setTimeout","localStorage","setItem","token","cargando","removeItem","tokenAuth","defaults","headers","common","AuthState","initialState","getItem","AuthReducer","datos","respuesta","response","RutaPrivada","Component","component","render","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b39da23.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst alertaContext = createContext();\r\n\r\nexport default alertaContext;","import { createContext } from 'react';\r\n\r\nconst authContext = createContext();\r\n\r\nexport default authContext;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AlertaContext from '../../context/Alertas/alertaContext';\r\nimport AuthContext from '../../context/Autenticacion/authContext';\r\n\r\n\r\nconst Login = ( props ) => {\r\n\r\n    //extraer los valores del context\r\n    const alertaContext = useContext(AlertaContext);\r\n    const { alerta, mostrarAlerta } = alertaContext;\r\n\r\n    const authContext = useContext(AuthContext);\r\n    const { mensaje, autenticado, iniciarSesion } = authContext;\r\n\r\n        //En caso de que el usuario o password no exista\r\n        useEffect( ()=>{\r\n\r\n            if (autenticado) {\r\n                props.history.push('/proyectos');\r\n            }\r\n\r\n            if (mensaje) {\r\n                mostrarAlerta(mensaje.msg, mensaje.categoria);\r\n            }\r\n\r\n            // eslint-disable-next-line\r\n        }, [mensaje, autenticado, props.history]);\r\n\r\n    //State para inicio de Sesion\r\n    const [ usuario, guardarUsuario] = useState ({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    //Destructuring del state\r\n    const { email, password } = usuario;\r\n\r\n    //Funcion para cambiar el state\r\n    const onChange = (e) => {\r\n        guardarUsuario({\r\n            ...usuario,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    //Cuando el usuario inicia sesion\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        //validación campos vacios\r\n        if (email.trim() === '' || password.trim() === '') {\r\n\r\n            mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\r\n        }\r\n\r\n        //Pasarlo al action\r\n        iniciarSesion({ email, password });\r\n\r\n    }\r\n\r\n\r\n    return ( \r\n        <div className=\"form-usuario\">\r\n\r\n            {(alerta)\r\n                ?( <div className={ `alerta ${alerta.categoria}` }> { alerta.msg } </div> )\r\n                :null\r\n            }\r\n\r\n            <div className=\"contenedor-form sombre-dark\">\r\n                <h1>Iniciar Sesion</h1>\r\n\r\n                <form\r\n                    onSubmit={onSubmit}\r\n                >\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Tu Email\"\r\n                            value={email}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Tu Password\"\r\n                            value={password}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Iniciar Sesión\"/>\r\n                    </div>\r\n                    \r\n                </form>\r\n\r\n                <Link to={'/nueva-cuenta'} className=\"enlace-cuenta\">\r\n                    Obtener Cuenta\r\n                </Link>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Login;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AlertaContext from '../../context/Alertas/alertaContext';\r\nimport AuthContext from '../../context/Autenticacion/authContext';\r\n\r\nconst NuevaCuenta = ( props ) => {\r\n\r\n    //extraer los valores del context\r\n    const alertaContext = useContext(AlertaContext);\r\n    const { alerta, mostrarAlerta } = alertaContext;\r\n\r\n    const authContext = useContext(AuthContext);\r\n    const { mensaje, autenticado, registrarUsuario } = authContext;\r\n\r\n    //En caso de que el usuario se haya autenticado o registrado  o sea primer registro\r\n     useEffect( ()=>{\r\n\r\n        if (autenticado) {\r\n            props.history.push('/proyectos');\r\n        }\r\n\r\n        if (mensaje) {\r\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n     }, [mensaje, autenticado, props.history]);\r\n\r\n    //State para inicio de Sesion\r\n    const [ usuario, guardarUsuario] = useState ({\r\n        nombre: '',\r\n        email: '',\r\n        password: '',\r\n        confirmar: ''\r\n    });\r\n\r\n    //Destructuring del state\r\n    const { nombre, email, password, confirmar } = usuario;\r\n\r\n    //Funcion para cambiar el state\r\n    const onChange = (e) => {\r\n        guardarUsuario({\r\n            ...usuario,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    //Cuando el usuario inicia sesion\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        //validación campos vacios\r\n        if( nombre.trim() === '' || email.trim() === '' || password.trim() === '' || confirmar.trim() === ''){\r\n            mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\r\n            return;\r\n        }\r\n\r\n        //Pasword minimo de 6 caracteres\r\n        if(password.length < 6){\r\n            mostrarAlerta('El password debe ser minimo de 6 caracteres', 'alerta-error');\r\n            return;\r\n        }\r\n\r\n        //Pasword's iguales\r\n        if(password !== confirmar){\r\n            mostrarAlerta('El password debe ser identico', 'alerta-error');\r\n            return;\r\n        }\r\n\r\n        //Pasarlo al action\r\n        registrarUsuario({\r\n            nombre,\r\n            email,\r\n            password\r\n        });\r\n    }\r\n\r\n\r\n    return ( \r\n        <div className=\"form-usuario\">\r\n            \r\n            {(alerta)\r\n                ?( <div className={ `alerta ${alerta.categoria}` }> { alerta.msg } </div> )\r\n                :null\r\n            }\r\n            \r\n            <div className=\"contenedor-form sombre-dark\">\r\n                <h1>Obtener una Cuenta</h1>\r\n\r\n                <form\r\n                    onSubmit={onSubmit}\r\n                >\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"nombre\">Nombre</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"nombre\"\r\n                            name=\"nombre\"\r\n                            placeholder=\"Tu Nombre\"\r\n                            value={nombre}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Tu Email\"\r\n                            value={email}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Tu password\"\r\n                            value={password}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"confirmar\">Confirmar Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"confirmar\"\r\n                            name=\"confirmar\"\r\n                            placeholder=\"Repite tu Password\"\r\n                            value={confirmar}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Registrarme\"/>\r\n                    </div>\r\n                    \r\n                </form>\r\n\r\n                <Link to={'/'} className=\"enlace-cuenta\">\r\n                    Volver a Iniciar Sesión\r\n                </Link>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default NuevaCuenta;","import { createContext } from 'react';\r\n\r\nconst proyectoContext = createContext();\r\n\r\n\r\nexport default proyectoContext;\r\n","import React, { Fragment, useState, useContext } from 'react';\r\nimport proyectoContext from '../../context/Proyectos/proyectoContext';\r\n\r\n\r\nconst NuevoProyecto = () => {\r\n\r\n    //Obtener desde el state, el formulario desde el context proyectoState\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const {formulario, errorformulario, mostrarFormulario, agregarProyecto, mostrarError } = proyectosContext; //este context esta disponible en todos lo componentes y podra mostrar el formulario en el aside\r\n\r\n    //State para proyecto\r\n    const [ proyecto, guardarProyecto ] = useState({\r\n        nombre: ''\r\n    });\r\n    \r\n    //destructuring\r\n    const { nombre } = proyecto\r\n\r\n    //funcion para leer contenido y guardar en State\r\n    const onChangeProyecto = e => {\r\n        guardarProyecto({\r\n            ...proyecto,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    //cuando se guarda el proyecto\r\n    const onSubmitProyecto = e => {\r\n        e.preventDefault();\r\n\r\n        //validar proyecto\r\n        if (nombre === ''){\r\n            mostrarError();\r\n            return;\r\n        }\r\n\r\n        //agregar al state\r\n        agregarProyecto(proyecto);\r\n\r\n        //Reiniciar el Form\r\n        guardarProyecto({\r\n            nombre: '',\r\n        })\r\n    }\r\n\r\n    //Fn -> Mostrar el formulario al hacer click\r\n    const onClickFormulario = () => {\r\n        mostrarFormulario();\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-block btn-primario\"\r\n                onClick={onClickFormulario}\r\n            >Nuevo Proyecto</button>\r\n\r\n            {   (formulario)\r\n                ?(  \r\n                     <form\r\n                        className=\"formulario-nuevo-proyecto\"\r\n                        onSubmit={onSubmitProyecto}\r\n                    >\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"input-text\"\r\n                        placeholder=\"Nombre Proyecto\"\r\n                        name=\"nombre\"\r\n                        value={nombre}\r\n                        onChange={onChangeProyecto}\r\n                    />\r\n    \r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primario btn-block\"\r\n                        value=\"Agregar Proyecto\"\r\n                    />\r\n    \r\n                    </form>\r\n                )\r\n                \r\n                :null\r\n            }\r\n\r\n            {(errorformulario)\r\n                ? <p className=\"mensaje error\">El nombre del Proyecto es obligatorio</p>\r\n                : null\r\n            }\r\n           \r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default NuevoProyecto;","import {createContext} from 'react';\r\n\r\nconst tareaContext = createContext();\r\n\r\nexport default tareaContext;","import React,{ useContext } from 'react';\r\nimport proyectoContext from '../../context/Proyectos/proyectoContext';\r\nimport tareaContext from '../../context/Tareas/tareaContext';\r\n\r\nconst Proyecto = ({proyecto}) => {\r\n    //Obtener desde el state, los proyectos\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyectoActual } = proyectosContext; //este context esta disponible en todos lo componentes y podra mostrar el formulario en el aside\r\n\r\n    //Obtener la función del context de tarea\r\n    const tareasContext = useContext(tareaContext);\r\n    const { obtenerTareas } = tareasContext;\r\n\r\n\r\n    //Funcion para agregar el proyecto Actual\r\n    const seleccionarProyecto = id => {\r\n        proyectoActual(id); //Fijar un proyecto actual\r\n        obtenerTareas(id); //filtrar las tareas cuando se de click\r\n    }\r\n\r\n    return ( \r\n        <li>\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-blank\"\r\n                onClick={() => seleccionarProyecto(proyecto._id)}\r\n            >{proyecto.nombre}</button>\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default Proyecto;","import React,{ useContext, useEffect } from 'react';\r\nimport Proyecto from './Proyecto';\r\nimport proyectoContext from '../../context/Proyectos/proyectoContext'; //importamos el context para consumirlo en este componente\r\nimport AlertaContext from '../../context/Alertas/alertaContext';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst ListadoProyectos = () => {\r\n   \r\n    //Obtener desde el state , los proyectos desde el context proyectoState\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { mensaje, proyectos, obtenerProyectos } = proyectosContext; //este context esta disponible en todos lo componentes y podra mostrar el formulario en el aside\r\n    \r\n    const alertaContext = useContext(AlertaContext);\r\n    const { alerta, mostrarAlerta  } = alertaContext;\r\n\r\n        //Obtener proyectos cuando carga el componente\r\n        useEffect(() => {\r\n\r\n            //Si existe un error\r\n            if(mensaje){\r\n\r\n                mostrarAlerta(mensaje.msg, mensaje.categoria);\r\n            }\r\n\r\n            obtenerProyectos();\r\n            //eslint-disable-next-line\r\n        }, [mensaje])\r\n    \r\n\r\n        //revisar si tiene contenido proyectos\r\n        if(proyectos.length === 0) return <p>No hay proyectos, crea uno nuevo</p>;\r\n\r\n    \r\n\r\n    return ( \r\n\r\n        <ul className=\"listado-proyectos\">\r\n\r\n            {(alerta)\r\n                ? ( <div className={ `alerta ${alerta.categoria}` }>{ alerta.msg }</div> )\r\n                : null\r\n            }\r\n\r\n            <TransitionGroup>\r\n\r\n                {proyectos.map(proyecto =>(\r\n                \r\n                    <CSSTransition\r\n                        key={proyecto._id}\r\n                        timeout={800}\r\n                        classNames=\"proyecto\"\r\n                    >\r\n                        <Proyecto\r\n                            proyecto={proyecto}\r\n                        />\r\n\r\n                    </CSSTransition>\r\n\r\n                ))}\r\n\r\n            </TransitionGroup>\r\n\r\n        </ul>\r\n     );\r\n}\r\n \r\nexport default ListadoProyectos;","import React from 'react';\r\nimport NuevoProyecto from '../proyectos/NuevoProyecto';\r\nimport ListadoProyectos from '../proyectos/ListadoProyectos'\r\n\r\nconst Sidebar = () => {\r\n    return ( \r\n            \r\n            <aside>\r\n                \r\n                <h1>MERN <span>Task's</span></h1>\r\n                \r\n                <NuevoProyecto />\r\n\r\n                <div className=\"proyectos\">\r\n                    <h2>Tus Proyectos</h2>\r\n                    \r\n                    <ListadoProyectos />\r\n                    \r\n                </div> \r\n\r\n                \r\n\r\n            </aside>\r\n\r\n     );\r\n}\r\n \r\nexport default Sidebar;","import React, { useContext, useEffect } from 'react';\r\nimport AuthContext from '../../context/Autenticacion/authContext';\r\n\r\nconst Barra = () => {\r\n\r\n    //Extraer la información de autenticación\r\n    const authContext = useContext(AuthContext);\r\n    const { usuario, usuarioAutenticado, cerrarSesion } = authContext;\r\n\r\n        useEffect(() => {\r\n            usuarioAutenticado();\r\n            // eslint-disable-next-line\r\n        }, []);\r\n\r\n    return ( \r\n        <header className=\"app-header\">\r\n            \r\n            {(usuario)\r\n                ?<p className=\"nombre-usuario\">Hola <span>{ usuario.nombre }</span></p>\r\n                : null\r\n            }\r\n\r\n\r\n            <nav className=\"nav-principal\">\r\n                <button\r\n                    className=\"btn btn-blank cerrar-sesion\"\r\n                    onClick={() => cerrarSesion()}\r\n                >Cerrar Sesión</button>\r\n            </nav>\r\n\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default Barra;","import React, {useContext, useState, useEffect} from 'react';\r\nimport proyectoContext from '../../context/Proyectos/proyectoContext'; //importamos el context para consumirlo en este componente\r\nimport tareaContext from '../../context/Tareas/tareaContext';\r\n\r\nconst FormTarea = () => {\r\n\r\n    //Extraer si un proyecto esta activo\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto } = proyectosContext; \r\n\r\n    //Obtener la función del context de tarea\r\n    const tareasContext = useContext(tareaContext);\r\n    const { tareaseleccionada, errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea, limpiarTarea } = tareasContext;\r\n\r\n        //useEffect que detecta si hay una tarea seleccionada\r\n        useEffect( () =>{\r\n\r\n            if( tareaseleccionada !== null ){\r\n                guardarTarea(tareaseleccionada)\r\n            } else {\r\n                guardarTarea({\r\n                    nombre: ''\r\n                })\r\n            }\r\n\r\n        }, [tareaseleccionada]);\r\n\r\n    //State del formulario\r\n    const [tarea, guardarTarea] = useState({\r\n        nombre: ''\r\n\r\n    })\r\n\r\n    //extraer el nombre del proyecto\r\n    const { nombre } = tarea;\r\n\r\n        //Si no hay proyecto seleccionado\r\n        if(!proyecto) return null;\r\n\r\n    //Array destructuring para extraer el proyecto actual\r\n    const [proyectoActual] = proyecto;\r\n\r\n    //Leer los valores del formulario\r\n    const handleChange = e => {\r\n        guardarTarea({\r\n            ...tarea,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();        \r\n\r\n        //validar\r\n        if(nombre.trim() === ''){\r\n            validarTarea();\r\n            return;\r\n        }\r\n\r\n        //Condicional para Agregar ó Editar una tarea\r\n        if( tareaseleccionada === null ){\r\n            //agregar la nueva tarea al state de tareas\r\n            /*tarea.proyectoId = proyectoActual.id;\r\n            tarea.estado = false;*///Se remplazan lineas de proyecto por las siguientes a motivo de backend\r\n            tarea.proyecto = proyectoActual._id;\r\n            agregarTarea(tarea);\r\n        } else {\r\n            //Actualizar tarea existente\r\n            actualizarTarea(tarea);\r\n\r\n            //Elimina tarea seleccionada del estate \r\n            limpiarTarea();\r\n        }\r\n\r\n        //Obtener y filtrar las tareas del proyecto actual\r\n        obtenerTareas(proyectoActual._id);\r\n\r\n        //reiniciar el Form\r\n        guardarTarea({\r\n            nombre: ''\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <div className=\"formulario\">\r\n\r\n            <form\r\n                onSubmit={onSubmit}\r\n            >\r\n\r\n                <div className=\"contenedor-input\">\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"input-text\"\r\n                        placeholder=\"Nombre Tarea...\"\r\n                        name=\"nombre\"\r\n                        value={nombre}\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                </div>\r\n\r\n                <div className=\"contenedor-input\">\r\n                    \r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primario btn-block\"\r\n                        value={ tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'}\r\n                    />\r\n\r\n                </div>\r\n\r\n            </form>\r\n            \r\n            {(errortarea)\r\n                ?<p className=\"mensaje error\">El nombre de la tarea es obligatorio</p>\r\n                :null\r\n            }\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default FormTarea;","import React, { useContext } from 'react';\r\nimport proyectoContext from '../../context/Proyectos/proyectoContext';\r\nimport tareaContext from '../../context/Tareas/tareaContext';\r\n//import { actualizarTarea } from '../../../../servidor/controllers/tareaController';\r\n\r\nconst Tarea = ({tarea}) => {\r\n\r\n    //Obtener desde el state, los proyectos\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto } = proyectosContext;\r\n\r\n    //Obtener la función del context de tarea\r\n    const tareasContext = useContext(tareaContext);\r\n    const { eliminarTarea, obtenerTareas, actualizarTarea, guardarTareaActual } = tareasContext;\r\n\r\n    //Extraer el proyecto con destructuring\r\n    const [ proyectoActual ] = proyecto;\r\n\r\n    //funcion que se ejecuta cuando el usuario presiona el boton de eliminar tarea\r\n    const tareaEliminar = id => {\r\n        eliminarTarea(id, proyectoActual._id);\r\n        obtenerTareas(proyectoActual.id);\r\n    }\r\n\r\n    //Funcion que modifica el estado de las tareas\r\n    const cambiarEstado = tarea => {\r\n        if( tarea.estado ) {\r\n            tarea.estado = false;\r\n        } else {\r\n            tarea.estado = true;\r\n        }\r\n        actualizarTarea(tarea);\r\n    }\r\n\r\n    //Agrega una tarea actual en el formulario cuando el usuario desea editarla\r\n    const seleccionarTarea = tarea => {\r\n        guardarTareaActual(tarea);\r\n    }\r\n\r\n    return ( \r\n        <li className=\"tarea sombra\">\r\n            <p>{tarea.nombre}</p>\r\n\r\n            <div className=\"estado\">\r\n                {(tarea.estado)\r\n                    ?   (\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"completo\"\r\n                                onClick={ () => cambiarEstado(tarea) }\r\n                            >Completo</button>\r\n                        )\r\n                    :   (\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"incompleto\"\r\n                                onClick={ () => cambiarEstado(tarea) }\r\n                            >Incompleto</button>\r\n                        )\r\n                }\r\n            </div>\r\n\r\n            <div className=\"acciones\">\r\n\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primario\"\r\n                    onClick={ ()=> seleccionarTarea(tarea) }\r\n                >Editar</button>\r\n\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secundario\"\r\n                    onClick={ () => tareaEliminar(tarea._id) }\r\n                >Eliminar</button>\r\n\r\n            </div>\r\n        </li>\r\n\r\n     );\r\n}\r\n \r\nexport default Tarea;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport Tarea from './Tarea';\r\nimport proyectoContext from '../../context/Proyectos/proyectoContext'; //importamos el context para consumirlo en este componente\r\nimport tareaContext from '../../context/Tareas/tareaContext';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\n\r\n\r\nconst ListadoTareas = () => {\r\n\r\n    //Obtener desde el state, el formulario desde el context proyectoState\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto, eliminarProyecto } = proyectosContext; \r\n\r\n    //Obtener las tareas del proyecto desde el context tarea\r\n    const tareasContext = useContext(tareaContext);\r\n    const { tareasproyecto } = tareasContext;\r\n\r\n\r\n        //Si no hay proyecto seleccionado\r\n        if(!proyecto) return <h2>Selecciona un Proyecto</h2>;\r\n\r\n    //Array destructuring para extraer el proyecto actual\r\n    const [proyectoActual] = proyecto;\r\n\r\n\r\n    //Eliminar Proyecto\r\n    const onClickEliminar = () => {\r\n        eliminarProyecto(proyectoActual._id)\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Proyecto: {proyectoActual.nombre}</h2>\r\n\r\n            <ul className=\"listado-tareas\">\r\n                {(tareasproyecto.length === 0) \r\n                    ?   (<li className=\"tarea\"><p>No hay Tareas</p></li>)\r\n                    :   <TransitionGroup>\r\n\r\n                            {tareasproyecto.map(tarea => (\r\n                              \r\n                                <CSSTransition\r\n                                    key={tarea._id}\r\n                                    timeout={450}\r\n                                    classNames=\"tarea\"\r\n                                >\r\n                                    <Tarea\r\n                                        tarea={tarea}\r\n                                    />\r\n\r\n                                </CSSTransition>\r\n                            ))}\r\n\r\n                        </TransitionGroup>\r\n                }            \r\n                \r\n            </ul>\r\n\r\n            <button \r\n                type=\"button\"\r\n                className=\"btn btn-eliminar\"\r\n                onClick={ () => onClickEliminar()}\r\n            >Eliminar Proyecto &times;</button>\r\n\r\n            \r\n\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default ListadoTareas;\r\n","import React, { useContext, useEffect } from 'react'\r\nimport Sidebar from '../layout/Sidebar';\r\nimport Barra from '../layout/Barra';\r\nimport FormTarea from '../tareas/FormTarea';\r\nimport ListadoTareas from '../tareas/ListadoTareas';\r\nimport AuthContext from '../../context/Autenticacion/authContext';\r\n\r\n\r\n\r\nconst Proyectos = () => {\r\n\r\n    //Extraer la información de autenticación\r\n    const authContext = useContext(AuthContext);\r\n    const { usuarioAutenticado } = authContext;\r\n\r\n        useEffect(() => {\r\n            usuarioAutenticado();\r\n            // eslint-disable-next-line\r\n        }, [])\r\n\r\n    return ( \r\n        <div className=\"contenedor-app\">\r\n            \r\n            <Sidebar />\r\n\r\n            <div className=\"seccion-principal\">\r\n\r\n                <Barra />\r\n\r\n                <main>\r\n\r\n                    <FormTarea />\r\n\r\n                    <div className=\"contenedor-tareas\">\r\n                        <ListadoTareas />\r\n                    </div>\r\n\r\n                </main>\r\n\r\n            </div>\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Proyectos;","import \r\n    {\r\n        FORMULARIO_PROYECTO, \r\n        OBTENER_PROYECTOS,\r\n        AGREGAR_PROYECTOS,\r\n        VALIDAR_FORMULARIO,\r\n        PROYECTO_ACTUAL,\r\n        ELIMINAR_PROYECTO,\r\n        PROYECTO_ERROR\r\n    } \r\nfrom '../../types/index';\r\n\r\n\r\nexport default (state, action) => {\r\n    //reducer generar el cambio de estado que recibe\r\n    switch(action.type){\r\n        \r\n        case FORMULARIO_PROYECTO:\r\n            return{\r\n                ...state,\r\n                formulario: true //para poder mostrar el formulario de proyectos en el dispatch\r\n            }\r\n        \r\n        case OBTENER_PROYECTOS:\r\n            //console.log(action.payload);\r\n            return{\r\n                ...state,\r\n                proyectos: action.payload //obtenemos todos los proyectos del dispatch\r\n            }\r\n\r\n        case AGREGAR_PROYECTOS:\r\n            return{\r\n                ...state,\r\n                proyectos: [ ...state.proyectos, action.payload ],\r\n                formulario: false,\r\n                errorformulario: false\r\n            }\r\n        \r\n        case VALIDAR_FORMULARIO:\r\n            return{\r\n                ...state,\r\n                errorformulario: true\r\n            }\r\n\r\n        case PROYECTO_ACTUAL:\r\n            return{\r\n                ...state,\r\n                proyecto: state.proyectos.filter(proyecto => proyecto._id === action.payload)\r\n            }\r\n        \r\n        case ELIMINAR_PROYECTO:\r\n            return{\r\n                ...state,\r\n                proyectos: state.proyectos.filter(proyecto => proyecto._id !== action.payload),\r\n                proyecto: null\r\n            }\r\n\r\n        case PROYECTO_ERROR:\r\n            return{\r\n                ...state,\r\n                mensaje: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","//Types para State y Reducer de Proyecto\r\nexport const FORMULARIO_PROYECTO = 'FORMULARIO_PROYECTO';\r\nexport const OBTENER_PROYECTOS = 'OBTENER_PROYECTOS';\r\nexport const AGREGAR_PROYECTOS = 'AGREGAR_PROYECTOS';\r\nexport const VALIDAR_FORMULARIO = 'VALIDAR_FORMULARIO';\r\nexport const PROYECTO_ACTUAL = 'PROYECTO_ACTUAL';\r\nexport const ELIMINAR_PROYECTO = 'ELIMINAR_PROYECTO';\r\n\r\n//Types para State y Reducer de Tareas\r\nexport const TAREAS_PROYECTO = 'TAREAS_PROYECTO';\r\nexport const AGREGAR_TAREA = 'AGREGAR_TAREA';\r\nexport const VALIDAR_TAREA = 'VALIDAR_TAREA';\r\nexport const ELIMINAR_TAREA = 'ELIMINAR_TAREA';\r\nexport const TAREA_ACTUAL = 'TAREA_ACTUAL';\r\nexport const ACTUALIZAR_TAREA = 'ACTUALIZAR_TAREA';\r\nexport const LIMPIAR_TAREA = 'LIMPIAR_TAREA';\r\nexport const PROYECTO_ERROR = 'PROYECTO_ERROR';\r\n\r\n//Types para State y Reducer de Alertas\r\nexport const MOSTRAR_ALERTA = 'MOSTRAR_ALERTA';\r\nexport const OCULTAR_ALERTA = 'OCULTAR_ALERTA';\r\n\r\n//Types para State y Reducer de Autenticacion\r\nexport const REGISTRO_EXITOSO = 'REGISTRO_EXITOSO';\r\nexport const REGISTRO_ERROR = 'REGISTRO_ERROR';\r\nexport const OBTENER_USUARIO = 'OBTENER_USUARIO';\r\nexport const LOGIN_EXITOSO = 'LOGIN_EXITOSO';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\nexport const CERRAR_SESION = 'CERRAR_SESION';","import axios from 'axios';\r\n\r\n//Apuntar todas las peticiones a la url definida en la variable de entorno\r\nconst clienteAxios = axios.create({\r\n    baseURL : process.env.REACT_APP_BACKEND_URL\r\n});\r\n\r\nexport default clienteAxios;","import React, {useReducer} from 'react';\r\n//import { v4 as uuidv4 } from 'uuid'; Se descarta por que ya se asigna un id atravez de backend (Mongo DB)\r\n\r\nimport proyectoContext from './proyectoContext';\r\nimport proyectoReducer from './proyectoReducer';\r\nimport \r\n    {\r\n        FORMULARIO_PROYECTO, \r\n        OBTENER_PROYECTOS,\r\n        AGREGAR_PROYECTOS,\r\n        VALIDAR_FORMULARIO,\r\n        PROYECTO_ACTUAL,\r\n        ELIMINAR_PROYECTO,\r\n        PROYECTO_ERROR\r\n    } \r\nfrom '../../types/index';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\n\r\nconst ProyectoState = props => {\r\n\r\n    /*const proyectos =[\r\n        {id: 1, nombre: 'Tienda Virtual'},\r\n        {id: 2, nombre: 'Intranet'},\r\n        {id: 3, nombre: 'Diseño Sitio Web'},\r\n        {id: 4, nombre: 'MERN'}\r\n    ]*/ //se utilizo para simular BD\r\n\r\n    const initialState = {\r\n        proyectos : [],\r\n        formulario : false,\r\n        errorformulario: false,\r\n        proyecto: null,\r\n        mensaje: null\r\n    }\r\n\r\n    //Dispatch para ejecutar las acciones\r\n    const [ state, dispatch ] = useReducer(proyectoReducer, initialState);\r\n\r\n    //alerta para mostrar si hay errores en CRUD\r\n    // const alerta = {\r\n    //     msg: 'Hubo un error al realizar la ejecución, intenta mas tarde',\r\n    //     categoria: 'alerta-error'\r\n    // }\r\n\r\n    //Serie de funciones para el CRUD\r\n    const mostrarFormulario = () => {\r\n\r\n        dispatch({\r\n            type: FORMULARIO_PROYECTO\r\n        })\r\n    }\r\n\r\n    //Obtener los Proyectos\r\n    const obtenerProyectos = async () => {\r\n        \r\n        try {\r\n\r\n            const resultado = await clienteAxios.get('/api/proyectos');\r\n\r\n                dispatch({\r\n                    type: OBTENER_PROYECTOS,\r\n                    payload: resultado.data.proyectos\r\n                })\r\n            \r\n        } catch (error) {\r\n            \r\n            const alerta = {\r\n                msg: 'Hubo un error al realizar la ejecución, intenta mas tarde',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: PROYECTO_ERROR,\r\n                payload: alerta\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    //Agregar Nuevo Proyecto\r\n    const agregarProyecto = async proyecto => {\r\n        //proyecto.id = uuidv4(); Se descarta por que ya se asigna un id atravez de backend (Mongo DB)\r\n        try {\r\n            \r\n            const resultado = await clienteAxios.post('/api/proyectos', proyecto);\r\n            \r\n                console.log(resultado);\r\n            \r\n                //insertar el proyecto en el state\r\n                dispatch ({\r\n                    type: AGREGAR_PROYECTOS,\r\n                    payload: resultado.data\r\n                })\r\n            \r\n        } catch (error) {\r\n            \r\n            const alerta = {\r\n                msg: 'Hubo un error al realizar la ejecución, intenta mas tarde',\r\n                categoria: 'alerta-error'\r\n            }\r\n\r\n            dispatch({\r\n                type: PROYECTO_ERROR,\r\n                payload: alerta\r\n            })\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    //Validar el formulario por Errores\r\n    const mostrarError = () => {\r\n\r\n        dispatch({\r\n            type: VALIDAR_FORMULARIO\r\n        })\r\n    }\r\n\r\n    //Selecciona proyecto al dar click\r\n    const proyectoActual = proyectoId => {\r\n\r\n        dispatch({\r\n            type: PROYECTO_ACTUAL,\r\n            payload: proyectoId\r\n        })\r\n    }\r\n\r\n    //elimina un proyecto\r\n    const eliminarProyecto = async proyectoId => {\r\n\r\n        try {\r\n            \r\n            await clienteAxios.delete(`/api/proyectos/${proyectoId}`);\r\n\r\n            dispatch({\r\n                type: ELIMINAR_PROYECTO,\r\n                payload: proyectoId\r\n            })\r\n                \r\n        } catch (error) {\r\n            //console.log(error);\r\n            const alerta = {\r\n                msg: 'Hubo un error al realizar la ejecución, intenta mas tarde',\r\n                categoria: 'alerta-error'\r\n            }\r\n\r\n            dispatch({\r\n                type: PROYECTO_ERROR,\r\n                payload: alerta\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <proyectoContext.Provider\r\n            value={{\r\n                proyectos: state.proyectos,\r\n                formulario: state.formulario,\r\n                errorformulario: state.errorformulario,\r\n                proyecto: state.proyecto,\r\n                mensaje: state.mensaje,\r\n                mostrarFormulario,\r\n                obtenerProyectos,\r\n                agregarProyecto,\r\n                mostrarError,\r\n                proyectoActual,\r\n                eliminarProyecto\r\n            }}\r\n        >\r\n            {props.children}\r\n        </proyectoContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ProyectoState;","import \r\n    { \r\n        TAREAS_PROYECTO,\r\n        AGREGAR_TAREA,\r\n        VALIDAR_TAREA,\r\n        ELIMINAR_TAREA,\r\n        TAREA_ACTUAL,\r\n        ACTUALIZAR_TAREA,\r\n        LIMPIAR_TAREA\r\n    } \r\nfrom '../../types/index';\r\n\r\n \r\nexport default (state, action) => {\r\n\r\n    switch(action.type){\r\n        \r\n        case TAREAS_PROYECTO:\r\n            return{\r\n                ...state,\r\n                //antes de backend tareasproyecto: state.tareasproyecto.filter( tarea => tarea.proyectoId === action.payload )\r\n                tareasproyecto: action.payload\r\n            }\r\n        \r\n        case AGREGAR_TAREA:\r\n            return{\r\n                ...state,\r\n                tareasproyecto: [ action.payload, ...state.tareasproyecto ],\r\n                errortarea: false\r\n            }\r\n        \r\n        case VALIDAR_TAREA:\r\n            return{\r\n                ...state,\r\n                errortarea: true\r\n            }\r\n\r\n       \r\n        case ELIMINAR_TAREA:\r\n            return{\r\n                ...state,\r\n                tareasproyecto: state.tareasproyecto.filter(tarea => tarea._id !== action.payload)\r\n            }\r\n        \r\n       \r\n        case ACTUALIZAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareasproyecto: state.tareasproyecto.map(tarea => tarea._id === action.payload._id ? action.payload : tarea)\r\n            }\r\n\r\n        case TAREA_ACTUAL:\r\n            return{\r\n                ...state,\r\n                tareaseleccionada: action.payload\r\n            }        \r\n        \r\n        case LIMPIAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareaseleccionada: null\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer } from 'react';\r\nimport TareaContext from './tareaContext';\r\nimport TareaReducer from './tareaReducer';\r\n//import { v4 as uuidv4 } from 'uuid';\r\nimport \r\n    { \r\n        TAREAS_PROYECTO,\r\n        AGREGAR_TAREA,\r\n        VALIDAR_TAREA,\r\n        ELIMINAR_TAREA,\r\n        TAREA_ACTUAL,\r\n        ACTUALIZAR_TAREA,\r\n        LIMPIAR_TAREA\r\n\r\n    } \r\nfrom '../../types/index';\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst TareaState = props => {\r\n\r\n    const initialState = {\r\n        /*tareas: [\r\n            {id: 1, nombre: 'Elegir Plataforma', estado: true, proyectoId: 1},\r\n            {id: 2, nombre: 'Elegir Colores', estado: false, proyectoId: 2},\r\n            {id: 3, nombre: 'Elegir Plataforma de Pago', estado: false, proyectoId: 3},\r\n            {id: 4, nombre: 'Elegir Hosting', estado: true, proyectoId: 4},\r\n            {id: 5, nombre: 'Elegir Plataforma', estado: true, proyectoId: 1},\r\n            {id: 6, nombre: 'Elegir Colores', estado: false, proyectoId: 2},\r\n            {id: 7, nombre: 'Elegir Plataforma de Pago', estado: false, proyectoId: 3},\r\n            {id: 8, nombre: 'Elegir Plataforma', estado: true, proyectoId: 4},\r\n            {id: 9, nombre: 'Elegir Colores', estado: false, proyectoId: 1},\r\n            {id: 10, nombre: 'Elegir Plataforma de Pago', estado: false, proyectoId: 2},\r\n            {id: 11, nombre: 'Elegir Plataforma', estado: true, proyectoId: 3},\r\n            {id: 12, nombre: 'Elegir Colores', estado: false, proyectoId: 4},\r\n            {id: 13, nombre: 'Elegir Plataforma de Pago', estado: false, proyectoId: 3},\r\n        ],*///se utilizo para simular BD\r\n        tareasproyecto: [], //para la simulacion de la BD en lugar de -> [] fue \"null\"\r\n        errortarea: false,\r\n        tareaseleccionada: null\r\n    }\r\n\r\n    //Crear dispatch y state\r\n    const[ state, dispatch ] = useReducer(TareaReducer, initialState);\r\n\r\n\r\n    //Obtener las tareas de un proyecto\r\n    const obtenerTareas = async proyecto => {\r\n\r\n        //console.log(proyecto)\r\n        try {\r\n\r\n            const resultado = await clienteAxios.get('/api/tareas', { params: { proyecto } } );\r\n                \r\n                //console.log(resultado);\r\n\r\n                dispatch({\r\n                    type: TAREAS_PROYECTO,\r\n                    payload: resultado.data.tareas\r\n                })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    //Agregar una tarea al proyecto seleccionado\r\n    const agregarTarea = async tarea => {\r\n        //tarea.id = uuidv4();\r\n        //console.log(tarea);\r\n       try {\r\n             await clienteAxios.post('/api/tareas', tarea);\r\n                //console.log(resultado);\r\n\r\n                dispatch({\r\n                    type: AGREGAR_TAREA,\r\n                    payload: tarea\r\n                })\r\n\r\n       } catch (error) {\r\n\r\n            console.log(error);\r\n       }\r\n    }\r\n\r\n    //Valida y muestra un error en caso necesario del formulario de tareas\r\n    const validarTarea = () => {\r\n        dispatch({\r\n            type: VALIDAR_TAREA\r\n        })\r\n    }\r\n\r\n    //Eliminar Tarea por id\r\n    const eliminarTarea = async (id, proyecto) => {\r\n        \r\n        try {\r\n\r\n            await clienteAxios.delete(`/api/tareas/${id}`, { params: { proyecto } });\r\n\r\n            dispatch({\r\n                type: ELIMINAR_TAREA,\r\n                payload: id\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    //Edita o modifica una tarea\r\n    const actualizarTarea = async tarea => {\r\n        //console.log(tarea);\r\n        \r\n        try {\r\n\r\n            const resultado = await clienteAxios.put(`/api/tareas/${tarea._id}`, tarea);\r\n            \r\n            //console.log(resultado);\r\n\r\n            dispatch({\r\n                type: ACTUALIZAR_TAREA,\r\n                payload: resultado.data.tarea\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    //Extrae una tarea para edición\r\n    const guardarTareaActual = tarea => {\r\n        dispatch({\r\n            type: TAREA_ACTUAL,\r\n            payload: tarea\r\n        })\r\n    }\r\n\r\n\r\n    //Elimina una tarea seleccionada\r\n    const limpiarTarea = () => {\r\n        dispatch({\r\n            type: LIMPIAR_TAREA\r\n        })\r\n    }\r\n\r\n    return(\r\n\r\n        <TareaContext.Provider\r\n            value={{\r\n                //tareas: state.tareas,\r\n                tareasproyecto: state.tareasproyecto,\r\n                errortarea: state.errortarea,\r\n                tareaseleccionada: state.tareaseleccionada,\r\n                obtenerTareas,\r\n                agregarTarea,\r\n                validarTarea,\r\n                eliminarTarea,\r\n                guardarTareaActual,\r\n                actualizarTarea,\r\n                limpiarTarea\r\n            }}\r\n        >\r\n            {props.children}\r\n        </TareaContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TareaState;","import \r\n    {\r\n        MOSTRAR_ALERTA,\r\n        OCULTAR_ALERTA\r\n    } \r\nfrom '../../types';\r\n\r\nexport default ( state, action ) => {\r\n\r\n    switch (action.type) {\r\n        \r\n        case MOSTRAR_ALERTA:\r\n            return {\r\n                alerta: action.payload\r\n            }\r\n        \r\n        case OCULTAR_ALERTA:\r\n            return {\r\n                alerta: null\r\n            }\r\n\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}","import React, {  useReducer } from 'react';\r\nimport alertaReducer from  '../Alertas/alertaReducer';\r\nimport alertaContext from '../Alertas/alertaContext';\r\nimport \r\n    {\r\n        MOSTRAR_ALERTA,\r\n        OCULTAR_ALERTA\r\n    } \r\nfrom '../../types';\r\n\r\nconst AlertaState = ( props ) => {\r\n    \r\n    const initialState = {\r\n        alerta: null\r\n    }\r\n    \r\n    const [ state, dispatch ] = useReducer(alertaReducer, initialState);\r\n\r\n    //Funciones\r\n    const mostrarAlerta = ( msg, categoria ) => {\r\n        \r\n        dispatch({\r\n            type: MOSTRAR_ALERTA,\r\n            payload: {\r\n                msg,\r\n                categoria\r\n            }\r\n        });\r\n\r\n        setTimeout(()=>{\r\n\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n\r\n        },5000)\r\n    }\r\n\r\n\r\n    return ( \r\n        <alertaContext.Provider\r\n            value={{\r\n                alerta: state.alerta,\r\n                mostrarAlerta\r\n            }}\r\n        >\r\n            { props.children }\r\n        </alertaContext.Provider>\r\n     );\r\n}\r\n \r\nexport default AlertaState;","import \r\n    {\r\n        REGISTRO_EXITOSO,\r\n        REGISTRO_ERROR,\r\n        OBTENER_USUARIO,\r\n        LOGIN_EXITOSO,\r\n        LOGIN_ERROR,\r\n        CERRAR_SESION \r\n    } \r\nfrom '../../types';\r\n\r\nexport default ( state, action ) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case LOGIN_EXITOSO:\r\n        case REGISTRO_EXITOSO:\r\n            localStorage.setItem('token', action.payload.token); //guarda el token de la api en el local storage\r\n            return{\r\n                ...state,\r\n                autenticado: true,\r\n                mensaje: null,\r\n                cargando: false //evitar flash al cargar pagina\r\n            }\r\n\r\n        case CERRAR_SESION:\r\n        case LOGIN_ERROR:\r\n        case REGISTRO_ERROR:\r\n            localStorage.removeItem('token');\r\n            return{\r\n                ...state,\r\n                token: null,\r\n                usuario: null,\r\n                autenticado: false,\r\n                mensaje: action.payload,\r\n                cargando: false //evitar flash al cargar pagina\r\n            }\r\n        \r\n        case OBTENER_USUARIO:\r\n            return{\r\n                ...state,\r\n                autenticado: true,\r\n                usuario: action.payload,\r\n                cargando: false //evitar flash al cargar pagina\r\n            }\r\n        \r\n        \r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}","import clienteAxios from './axios';\r\n\r\nconst tokenAuth = ( token ) => {\r\n\r\n    if (token) {\r\n        //le asignamos un token como default a axios\r\n        clienteAxios.defaults.headers.common['x-auth-token'] = token;\r\n\r\n    } else {\r\n        //eliminarlo de axios\r\n        delete clienteAxios.defaults.headers.common['x-auth-token'];\r\n\r\n    }\r\n}\r\n\r\nexport default tokenAuth;","import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\nimport clienteAxios from '../../config/axios';\r\nimport tokenAuth from '../../config/tokenAuth';\r\n\r\nimport \r\n    {\r\n        REGISTRO_EXITOSO,\r\n        REGISTRO_ERROR,\r\n        OBTENER_USUARIO,\r\n        LOGIN_EXITOSO,\r\n        LOGIN_ERROR,\r\n        CERRAR_SESION \r\n    } \r\nfrom '../../types';\r\n\r\n\r\nconst AuthState = ( props ) => {\r\n    \r\n    const initialState = {\r\n        token: localStorage.getItem('token'),\r\n        autenticado: null,\r\n        usuario: null,\r\n        mensaje: null,\r\n        cargando: true,\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(AuthReducer, initialState);\r\n\r\n    \r\n    const registrarUsuario = async (datos) => {\r\n\r\n        try {\r\n            const respuesta = await clienteAxios.post( '/api/usuarios', datos ); //Se envian los datos al server\r\n            \r\n                //console.log(respuesta.data);\r\n                dispatch({\r\n                    type: REGISTRO_EXITOSO,\r\n                    payload: respuesta.data\r\n                });\r\n\r\n                //Obtener el usuario\r\n                usuarioAutenticado();\r\n\r\n        } catch (error) {\r\n            //console.log(error.response.data.msg); mostrar el error con |cors (server)|\r\n            \r\n            const alerta = {\r\n                msg: error.response.data.msg,\r\n                categoria: 'alerta-error'\r\n            }\r\n            \r\n                dispatch({\r\n                    type: REGISTRO_ERROR,\r\n                    payload: alerta\r\n                })\r\n        }   \r\n    }\r\n\r\n    //Retorna el usuario autenticado\r\n    const usuarioAutenticado = async () => {\r\n\r\n        const token = localStorage.getItem('token');\r\n\r\n            if (token) {\r\n                //TODO: Función para enviar el token por headers mediante axios defaults\r\n                tokenAuth(token);\r\n            }\r\n\r\n            try {\r\n\r\n                const respuesta = await clienteAxios.get('/api/auth');\r\n                    //console.log(respuesta);\r\n\r\n                dispatch({\r\n                    type: OBTENER_USUARIO,\r\n                    payload: respuesta.data.usuario\r\n                })\r\n\r\n                \r\n\r\n            } catch (error) {\r\n                \r\n                    //console.log(error.response);\r\n                    \r\n                    dispatch({\r\n                        type: LOGIN_ERROR\r\n                    })\r\n\r\n            }\r\n    }\r\n\r\n    //Cuando el usuario inicia sesión\r\n\r\n    const iniciarSesion = async ( datos ) => {\r\n        try {\r\n            \r\n            const respuesta = await clienteAxios.post('/api/auth', datos);                \r\n\r\n                //console.log(respuesta);\r\n\r\n                dispatch({\r\n                    type: LOGIN_EXITOSO,\r\n                    payload: respuesta.data\r\n                })\r\n\r\n                //Obtener el usuario\r\n                usuarioAutenticado();\r\n            \r\n        } catch (error) {\r\n\r\n                //console.log(error.response.data.msg);\r\n            console.log(error)\r\n            const alerta = {\r\n                msg: error.response.data.msg,\r\n                categoria: 'alerta-error'\r\n            }\r\n            \r\n                dispatch({\r\n                    type: LOGIN_ERROR,\r\n                    payload: alerta\r\n                })\r\n        }\r\n    }\r\n\r\n    //Cerrar sesion\r\n    const cerrarSesion = () => {\r\n        dispatch({\r\n            type: CERRAR_SESION\r\n        })\r\n    }\r\n\r\n    return ( \r\n\r\n        <AuthContext.Provider\r\n            value={{\r\n                token: state.token,\r\n                autenticado: state.autenticado,\r\n                usuario: state.usuario,\r\n                mensaje: state.mensaje,\r\n                cargando: state.cargando, //para controlar flash al cargar pagina\r\n                registrarUsuario,\r\n                iniciarSesion,\r\n                usuarioAutenticado,\r\n                cerrarSesion\r\n            }}\r\n        >\r\n            { props.children }\r\n            \r\n        </AuthContext.Provider>\r\n\r\n     );\r\n}\r\n \r\nexport default AuthState;","import React, { useContext, useEffect } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthContext from '../../context/Autenticacion/authContext';\r\n\r\nconst RutaPrivada = ({ component: Component, ...props }) => {\r\n    \r\n    const authContext = useContext(AuthContext);\r\n    const { autenticado, cargando, usuarioAutenticado } = authContext;\r\n    \r\n        useEffect(() => {\r\n            usuarioAutenticado();\r\n           // eslint-disable-next-line\r\n        }, []);\r\n\r\n\r\n    return (  \r\n\r\n        <Route\r\n            { ...props }\r\n            render = {\r\n                props => !autenticado && !cargando\r\n                    ?( <Redirect to=\"/\" /> ) \r\n                    :( <Component { ...props } /> )\r\n            }\r\n        />\r\n\r\n    );\r\n}\r\n \r\nexport default RutaPrivada;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Login from './components/auth/Login';\nimport NuevaCuenta from './components/auth/NuevaCuenta';\nimport Proyectos from './components/proyectos/Proyectos';\n\nimport ProyectoState from './context/Proyectos/proyectoState';\nimport TareaState from './context/Tareas/tareaState';\nimport AlertaState from './context/Alertas/alertaState';\nimport AuthState from './context/Autenticacion/authState';\nimport tokenAuth from './config/tokenAuth';\nimport RutaPrivada from './components/rutas/RutaPrivada';\n\n//npm i axios para las peticiones http\n\n//REVISAR SI EXISTE UN TOKEN\nconst token = localStorage.getItem('token');\n    if (token) {\n        tokenAuth(token);\n    }\n\nfunction App() {\n\n    //console.log(process.env.REACT_APP_BACKEND_URL); variable de entorno \n\n  return (\n\n    <ProyectoState>\n        <TareaState>\n            <AlertaState>\n                <AuthState>\n                    <Router>\n                        <Switch>\n                            <Route exact path=\"/\" component={Login} />\n                            <Route exact path=\"/nueva-cuenta\" component={NuevaCuenta} />\n                            <RutaPrivada exact path=\"/proyectos\" component={Proyectos} />\n                        </Switch>\n                    </Router>\n                </AuthState>\n            </AlertaState>\n        </TareaState>\n    </ProyectoState>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}